// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	context "context"
	user "main/internal/user"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	redis "github.com/redis/go-redis/v9"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddToCache mocks base method.
func (m *MockRepository) AddToCache(ctx context.Context, key string, data interface{}, exp time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCache", ctx, key, data, exp)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToCache indicates an expected call of AddToCache.
func (mr *MockRepositoryMockRecorder) AddToCache(ctx, key, data, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCache", reflect.TypeOf((*MockRepository)(nil).AddToCache), ctx, key, data, exp)
}

// Exists mocks base method.
func (m *MockRepository) Exists(ctx context.Context, keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exists", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockRepositoryMockRecorder) Exists(ctx interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRepository)(nil).Exists), varargs...)
}

// GetFromCache mocks base method.
func (m *MockRepository) GetFromCache(ctx context.Context, key string, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromCache", ctx, key, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFromCache indicates an expected call of GetFromCache.
func (mr *MockRepositoryMockRecorder) GetFromCache(ctx, key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromCache", reflect.TypeOf((*MockRepository)(nil).GetFromCache), ctx, key, data)
}

// Set mocks base method.
func (m *MockRepository) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRepositoryMockRecorder) Set(ctx, key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRepository)(nil).Set), ctx, key, value, expiration)
}

// UpdateCache mocks base method.
func (m *MockRepository) UpdateCache(ctx context.Context, userRepo user.Repository) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateCache", ctx, userRepo)
}

// UpdateCache indicates an expected call of UpdateCache.
func (mr *MockRepositoryMockRecorder) UpdateCache(ctx, userRepo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCache", reflect.TypeOf((*MockRepository)(nil).UpdateCache), ctx, userRepo)
}
